1- INTRODUCCIÓN A LAS EXTENSIONES REACTIVAS Y A LA PROGRAMACIÓN REACTIVA

  ¿Porqué usar extensiones reactivas?
    - Porque todos quieren información en tiempo real.

  ¿Cuando usar extensiones reactivas?
    * Para manejar cualquier evento en la interfaz del usuario.
    * Cuando es necesario notificar sobre cambios en un objeto(s)
    * Cuando se utiliza comunicación por sockets.
    * Cuando necesitamos trabajar con flujos de información (Streams)

    Piezas fundamentales de la programación reactiva.
      * Observables
        - Son la fuente de la información
        - Pueden emitir multiples valores, sólo uno o ninguno.
        - Pueden emitir errores.
        - Pueden ser infinitos, finitos. (Se pueden completar si son infinitos)
        - Pueden ser síncronos o asíncronos.
      * Subscriber
        - Se suscriben a un observable, es decir, estar pendiente de lo que realiza el observable.
        - Consumen / Observan la data del observable.
        - Pueden recibir los errores y eventos de observable.
        - Desconocen todo lo que se encuentra detrás del observable.
      * Operadores
        - Usados para transformar observables (map, group, scan...)
        - Usados para filtrar observables (filter, distinct, skip, debounce...)
        - Usados para combinar observables .
        - Usados para crear nuevos observables.
        
     Beneficios de la programación reactiva
      * Evitar el "Callback Hell".
      * Trabajar de forma simple tareas sincrónas y asíncronas.
      * Uso de Operadores para reducir y simplificar el trabajo
      * Es facil transformar los flujos (streams) de información.
      * Facil de implementar.
      * Fácil anexar procedimientos sin alterar el producto.

    ¿Qués es Reactive X y como funciona?
      * Reactive X es una API para programación asíncrona usando observables, se autoproclaman diciendo que son la combinación del patrón observer, del patrón iterador y de la programación funcional implementado de manera correcta.

    El patrón observer  
      * Es un patrón de diseño de software que define una dependencia del tipo uno a muchos entre objetos, de manera que cuando uno de los objetos cambia su estado, notifica este cambio a todos los dependientes. (Un ejemplo puede ser una avenida con semaforos).
      * Notifica cuando sucede cambios.

    El patrón iterador.
      * El POO, el patrón iterador define una interfaz que declara los métodos necesarios para acceder secuencialmente a un grupo de objetos de una colección.
      * Poder ejecutar operaciones secuenciales.

      * Es básicamente, crear un conjunto de funciones que tengan un objetivo específico. Es decir, si tengo una función que reciba "A" y retorna "A + 1", siempre que yo llame esa función, retornará "A + 1". Sin efectos secundario, sin mutar la data.
      * Tener funciones con tareas específicas que reciban argumentos y no muten la información.


2- OBSERVABLES.
    Es necesario desusbcribirse de los observables que ya estan subscritos para evitar fugas de memoria, pero tambien si en un observer está utilizando el setInterval requieres limpiar el interval o finalizar el envio de información con el método complete(), Pueder ver el ejemplo en 01-observable/02-unsubscribe-add.ts


    Un subject es un tipo especial de observable y tiene un par de caracteristicas importantes:
      * Casteo Múltiple
      * También es un observer
      * También se puede manejar el next, error y complete.

      El subject ayuda a que la información de todos todos los subscriptions sea la misma, Puede ver el ejemplo en 01-observable/03-subjects.ts

      * Cuando la data es producida por el observable en si mismo, es considerado un "cold observable". PEro cuando la data es producida FUERA del observable es lladamo "Hot observable".


3- FUNCIONES PARA CREAR OBSERVABLES.

  Función of
    * Crea observables en base a un listado de elementos.
    * Emite los valores en secuencia de manera sincrona y cuando emita el último valor del observable, este finaliza.

  Función fromEvent
    * Nos permite crear observables en base a un eventTarget(que provengan del Document Object Model).
    * No hay un fin del observable pero si lo podemos completar.
    * Es el operador para crear observables más usado.

  Función range
    * Crea un observable que emite una secuencia de números en base a un rango
    * Por defectos son síncronos pero se pueden convertir en asíncronos utilizando un AsyncScheduler:
      * Este es un ejemplo (vé el código en 01-observables/06-range.ts): 
        asi range(-5, 10, asyncScheduler)

    Función timer e interval 
      * Ambos crean observables que trabajan con intervalos de tiempo
      * Son observables asíncronos por naturaleza
      * La función interval funciona como un setInterval nativo de JavaScript pero un poco diferente
      * La función timer funciona como un setTimeOut nativo de JavaScript pero también puede convertirse en un interval
      * Puedes ver el ejemplo de ambos en el archivo 01-observables/07-interval-and-timer.ts

    Los AsyncScheduler
      * No crea un observable, sino una subscripción.
      * Ver el ejemplo en 01-observables/08-asyncScheduler.ts

    Función from 
      * Toma cualquier cosa y la convierte a un obvservable

      * Ver el ejemplo de 01-observables/09-from.ts


4- OPERADORES BÁSICOS

  Operador map
    * Transforma lo que recibimos del observable en algo que nostros ocupemos ya sea para extraer información del observable o transformarla en algo diferente

  Operador pluck
    * Sirve para extraer un valor del observable que estamos recibiendo y que ese sea la nueva salida de dicho observable
    * Ver el ejemplo de 02-operadores-basicos/02-pluck.ts

  
  Operador mapTo (Esto esta deprecada desde la versión 9, se debe cambiar por el operador map)
    * Permite transformar la entrada a una salida específica (puede se lo que sea)
    * Ver el ejemplo de 02-operadores-basicos/03-mapTo.ts

  Operado filter
    * Nos sirve para filtrar las emisiones de los valores que emite el observable 
    * Ver el ejemplo 02-operadores-basicos/04-filter.ts

  Operador tap
    * Es utilizado para revisar como fluye la información a través de nuestro observables
    * El return dentro del tap es ignorado y no afecta al resultado, lo que significa que solo sirve para verificar como viene la información por el observable (depuración).
    ** Ver el ejemplo de 02-operadores-basicos/05-tap.ts


  Operador reduce
    * Hace lo misque que hace el reduce() en JavaScript
    * Aplica una función acumuladora a la s emisiones producidas de nuestro observable
    * No se tendrá ninguna emisión hasta que el observable se complete
    * Ver el ejemplo de 02-operadores-basicos/007-reduce.ts

  Operador scan
    * Es casi exactamente lo mismo que el operador reduce, pero la diferencia de este es que cuando los valores emitidos por nuestro observable, inmediantamente van saliendo el resultado del acumulador conforme van ingresando.
    * El operador scan es la base para el patrón REDUX ya que maneja el estado global de la aplicación en un único objeto.
    * Ver el ejemplo de 02-operadores-basicos/08-scan.ts


5- OPERADORES NO TAN COMUNES

  Operador take
    * Siver para limitar la cantidad de emisiones que se quiere recibir
    * Cuando llega al limite, el observable se completa y las emisiones restantes no llegarán a la subscripción 
    * Si el limete es mayor que las emisiones, este finalizará la subscripción cuando termine por recorrer todas las emisiones del observable
    * Ve el ejemplo de 03-operadores-no-tan-comunes/01-take.ts

  Operador first
    * Obtiene el primer valor que cumpla la condición y terminará con el observable
    * Si no se le pasa una condición, obtendrá la primera emisión del observable y terminará dicho observable
    * Ve el ejemplo de 03-operadores-no-tan-comunes/02-first.ts

  Operador takeWhile
    * Permite recibir valores mientras la condición se cumpla
    * Cuando la condición deja de cumplirse se completa el observable y la emisión que la terminó al menos de que se envie un booleano de que se necesita por ejemplo:
      * takeWhile(({ y }) => y <= 150, true)
      * Ve el ejemplo de 03-operadores-no-tan-comunes/03-takeWhile.ts

    Operador takeUntil
      * Recibe como parametro otro observable
      * Sigue recibiendo y emitiendo valores del primer observable hasta que el segundo observable emita su primer valor y este lo completará
       * Ve el ejemplo de 03-operadores-no-tan-comunes/04-takeUntil.ts

    Operador skip
      * Sirve para saltar u omitir "X" cantidad de emisiones iniciales
      * Ve el ejemplo de 03-operadores-no-tan-comunes/05-skip.ts

    Operador dictinct
    * Pasa las emisiones cuyos valores no han sido previamente emitidos.
    * Ve el ejemplo de 03-operadores-no-tan-comunes/06-distinct.ts

    Operador disctinctUntilChanged
      * Emite valores siempre y cuando la emisión no sea la misma que la anterior.
      * Ve el ejemplo de 03-operadores-no-tan-comunes/07-distinctUntilChanged.ts

    Operador distinctUntilKeyChanged
      * Hace lo misto que el distinctUntilChanged, solamente que solo sirve para emisiones de tipo objeto
      * Ve el ejemplo de 03-operadores-no-tan-comunes/08-distinctUntilKeyChanged.ts


6- OPERADORES QUE TRABAJAN CON TIEMPO

  Operador debounceTime
    * Nos ayuda a que nosotros podamos contar cuantas milesimas de segundo han pasado desde la última emision y si esa milesima de segundo sobrepasa el tiempo estipulado en el parametro, entonces emitirá dicho valor.
    * Ver el ejemplo en 04-operadores-tiempo/01-debounceTime.ts

  Operador throttleTime
    *Es muy parecido al debounceTime pero la diferencia es que ignora las emisiones que pasen en el lapso correspondiente.
    * Ver el ejemplo en 04-operadores-tiempo/02-throttleTime.ts

  Operador sampleTime
    * Nos permite obtener el último valor emitido en un intervalo de tiempo
    * Nos permite tener una subscripción que esta pendiente de cada una de sus emisiones en periodos de tiempo.
     * Ver el ejemplo en 04-operadores-tiempo/03-sampleTime.ts

  Operador sample
    * Emite el ultimo valor emitido por el observable hasta que el otro observable que tenemos dentro del operador sample() emita un valor.
    * Ver el ejemplo en 04-operadores-tiempo/04-sample.ts

  Operador auditTime
    * Emite el ultimo valor que ha sido emitido por el observable en un periodo de tiempo determinado.
     * Ver el ejemplo en 04-operadores-tiempo/05-auditTime.ts